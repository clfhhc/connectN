{"version":3,"file":"static/webpack/static/development/pages/index.js.9c2a77bc3d76c7527fa1.hot-update.js","sources":["webpack:///./src/components/ConnectN/index.tsx"],"sourcesContent":["import React, { useReducer, useEffect, useCallback, useState, useMemo } from 'react';\nimport css from 'styled-jsx/css';\nimport useReducerContext from '../../models/index';\nimport Board, { playerCheckerStyles } from './Board';\nimport { inititalState, reducer } from '../../models/game';\nimport { resetGame, placeOnePiece, getBanner } from '../../utils/connectN';\nimport { rem } from '../../utils/styleUtils';\n\nenum Settings {\n  CHANGE_RULES = 'CHANGE_RULES',\n  CHANGE_PLAYERS = 'CHANGE_PLAYERS',\n}\n\nconst titleStylesOnN = (setting: Settings | null, winRule: number) => css.resolve`\n  display: block;\n  text-align: center;\n  margin: ${rem(40)} auto;\n  font-size: ${rem(36)};\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n  cursor: pointer;\n\n  ::after {\n    content: '${setting === Settings.CHANGE_RULES ? 'Rules' : `Connect ${winRule}`}';\n  }\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n\n  :hover ::after {\n    content: '${setting === Settings.CHANGE_RULES ? 'Ok!' : `Change Rules`}';\n  }\n`;\n\nconst bannerStylesOnBanner = (banner: string) => css.resolve`\n  display: block;\n  text-align: center;\n  margin: ${rem(20)} auto;\n  font-size: ${rem(20)};\n  cursor: pointer;\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n\n  ::after {\n    content: \"${banner}\";\n  }\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n\n  :hover ::after {\n    content: 'Restart Game';\n  }\n`;\n\nconst legendStyles = css.resolve`\n  display: flex;\n  margin: ${rem(20)} auto;\n  font-size: ${rem(20)};\n  justify-content: center;\n  cursor: pointer;\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n`;\n\nconst legendLabelStyles = css.resolve`\n  margin: 0 ${rem(10)};\n  display: inline-block;\n`;\n\nconst legendColorStyles = css.resolve`\n  display: inline-block;\n  border: ${rem(1)} solid lightgray;\n  border-radius: 50%;\n  margin: 0 ${rem(10)};\n  width: ${rem(15)};\n  height: ${rem(15)};\n`;\n\nconst inputStyles = css.resolve`\n  display: block;\n  text-align: center;\n  font-size: ${rem(16)};\n  outline: none;\n  margin: ${rem(20)} auto;\n  max-width: ${rem(200)};\n  width: 100%;\n`;\n\nconst ConnectN: React.FC = () => {\n  const { state, dispatch } = useReducerContext();\n  const [gameState, gameDispatch] = useReducer(reducer, inititalState);\n  const [setting, updateSetting] = useState<Settings | null>(null);\n  const [inputText, changeInputText] = useState<string>('');\n  const { fullBoard, boardSetup, next, names, rowNum, checkAgainst, winRule } = state.setup;\n  const { record: gameRecord } = gameState;\n\n  const restartGame = useCallback(() => {\n    gameDispatch({\n      type: 'updateGameRecord',\n      payload: resetGame(gameRecord, fullBoard, boardSetup, next),\n    });\n  }, [gameRecord, fullBoard, boardSetup, next]);\n\n  useEffect(() => {\n    restartGame();\n  }, [state.setup]);\n\n  const titleStyles = useMemo(() => titleStylesOnN(setting, winRule), [setting, winRule]);\n  const bannerStyles = useMemo(() => bannerStylesOnBanner(getBanner(gameRecord, names)), [\n    gameRecord,\n    names,\n  ]);\n\n  const handleClickOnCell = useCallback(\n    (colInd: number) => () => {\n      gameDispatch({\n        type: 'updateGameRecord',\n        payload: gameRecord.gameOver\n          ? resetGame(gameRecord, fullBoard, boardSetup, next)\n          : placeOnePiece({\n              col: colInd,\n              curRecord: gameRecord,\n              fullBoard,\n              checkAgainst,\n              next,\n            }),\n      });\n    },\n    [gameDispatch, placeOnePiece, gameRecord, fullBoard, checkAgainst, next]\n  );\n\n  console.log(gameRecord);\n  console.log(state.setup);\n\n  return (\n    <div>\n      <h1>\n        <button\n          type=\"button\"\n          className={titleStyles.className}\n          onClick={() => {\n            if (setting !== Settings.CHANGE_RULES) {\n              updateSetting(Settings.CHANGE_RULES);\n            } else {\n              updateSetting(null);\n              try {\n                const inputArray = inputText.split(',').map(text => parseInt(text, 10));\n                if (inputArray.length !== 3) throw new Error();\n                dispatch({\n                  type: 'changeRules',\n                  payload: { rowNum: inputArray[1], colNum: inputArray[0], winRule: inputArray[2] },\n                });\n              } catch (err) {\n                console.log('invalid input');\n              }\n              changeInputText('');\n            }\n          }}\n        >\n          {titleStyles.styles}\n        </button>\n      </h1>\n      {setting === Settings.CHANGE_RULES ? (\n        <input\n          className={inputStyles.className}\n          type=\"text\"\n          placeholder=\"[column],[row],[number]\"\n          value={inputText}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => changeInputText(e.target.value)}\n          onBlur={() => {\n            updateSetting(null);\n            changeInputText('');\n          }}\n        />\n      ) : (\n        <button className={bannerStyles.className} type=\"button\" onClick={() => restartGame()}>\n          {bannerStyles.styles}\n        </button>\n      )}\n      {inputStyles.styles}\n      <button\n        className={legendStyles.className}\n        type=\"button\"\n        onClick={() => updateSetting(Settings.CHANGE_PLAYERS)}\n      >\n        {legendStyles.styles}\n        {names.map((n, ind) => (\n          <div className={legendLabelStyles.className} key={`legend-${n}`}>\n            {legendLabelStyles.styles}\n            <div className={`${legendColorStyles.className} ${playerCheckerStyles[ind].className}`}>\n              {playerCheckerStyles[ind].styles}\n              {legendColorStyles.styles}\n            </div>\n            {n}\n          </div>\n        ))}\n      </button>\n      <Board boards={gameRecord.boards} rowNum={rowNum} onClickOnCell={handleClickOnCell} />\n    </div>\n  );\n};\n\nexport default ConnectN;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AAJA;AAYA;AAbA;AAiBA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}