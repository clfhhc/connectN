{"version":3,"file":"static/webpack/static/development/pages/index.js.7cc53b23c22d463f9ed0.hot-update.js","sources":["webpack:///./src/components/ConnectN/index.tsx"],"sourcesContent":["import React, { useReducer, useEffect, useCallback, useState, useMemo } from 'react';\nimport css from 'styled-jsx/css';\nimport useReducerContext from '../../models/index';\nimport Board, { playerCheckerStyles } from './Board';\nimport { inititalState, reducer } from '../../models/game';\nimport { resetGame, placeOnePiece, getBanner } from '../../utils/connectN';\nimport { rem } from '../../utils/styleUtils';\n\nenum Settings {\n  CHANGE_RULES = 'CHANGE_RULES',\n  CHANGE_PLAYERS = 'CHANGE_PLAYERS',\n}\n\nconst titleStylesOnN = (setting: Settings | null, winRule: number) => css.resolve`\n  display: block;\n  text-align: center;\n  margin: ${rem(40)} auto;\n  font-size: ${rem(36)};\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n  cursor: pointer;\n\n  ::after {\n    content: '${setting === Settings.CHANGE_RULES ? 'Rules' : `Connect ${winRule}`}';\n  }\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n\n  :hover ::after {\n    content: '${setting === Settings.CHANGE_RULES ? 'Rules' : `Change Rules`}';\n  }\n`;\n\nconst bannerStylesOnBanner = (banner: string) => css.resolve`\n  display: block;\n  text-align: center;\n  margin: ${rem(20)} auto;\n  font-size: ${rem(20)};\n  cursor: pointer;\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n  height: 100%;\n\n  ::after {\n    content: \"${banner}\";\n  }\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n\n  :hover ::after {\n    content: 'Restart Game';\n  }\n`;\n\nconst legendStyles = css.resolve`\n  display: flex;\n  flex-flow: row wrap;\n  margin: ${rem(20)} auto;\n  font-size: ${rem(20)};\n  justify-content: center;\n  cursor: pointer;\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n  height: 100%;\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n`;\n\nconst legendLabelStyles = css.resolve`\n  margin: 0 ${rem(10)};\n  display: inline-block;\n\n  :first-of-type {\n    margin-left: 0;\n  }\n  :last-of-type {\n    margin-right: 0;\n  }\n`;\n\nconst legendColorStyles = css.resolve`\n  display: inline-block;\n  border: ${rem(1)} solid lightgray;\n  border-radius: 50%;\n  margin-right: ${rem(10)};\n  width: ${rem(15)};\n  height: ${rem(15)};\n`;\n\nconst inputContainerStyles = css.resolve`\n  height: ${rem(25)};\n`;\n\nconst inputStyles = css.resolve`\n  display: block;\n  text-align: center;\n  font-size: ${rem(16)};\n  outline: none;\n  margin: ${rem(20)} auto;\n  max-width: ${rem(350)};\n  border: ${rem(1)} solid gray;\n  height: 100%;\n  width: 100%;\n`;\n\nconst ConnectN: React.FC = () => {\n  const { state, dispatch } = useReducerContext();\n  const [gameState, gameDispatch] = useReducer(reducer, inititalState);\n  const [setting, updateSetting] = useState<Settings | null>(null);\n  const [inputText, changeInputText] = useState<string>('');\n  const { fullBoard, boardSetup, next, names, rowNum, checkAgainst, winRule } = state.setup;\n  const { record: gameRecord } = gameState;\n\n  const restartGame = useCallback(() => {\n    gameDispatch({\n      type: 'updateGameRecord',\n      payload: resetGame(gameRecord, fullBoard, boardSetup, next),\n    });\n  }, [gameRecord, fullBoard, boardSetup, next]);\n\n  useEffect(() => {\n    restartGame();\n  }, [state.setup]);\n\n  const titleStyles = useMemo(() => titleStylesOnN(setting, winRule), [setting, winRule]);\n  const bannerStyles = useMemo(() => bannerStylesOnBanner(getBanner(gameRecord, names)), [\n    gameRecord,\n    names,\n  ]);\n\n  const clearSetting = useCallback(() => {\n    updateSetting(null);\n    changeInputText('');\n  }, [updateSetting, changeInputText]);\n\n  const focusInput = useCallback((node: HTMLInputElement | null) => {\n    if (node) node.focus();\n  }, []);\n\n  const handleClickOnCell = useCallback(\n    (colInd: number) => () => {\n      if (setting) return;\n      gameDispatch({\n        type: 'updateGameRecord',\n        payload: gameRecord.gameOver\n          ? resetGame(gameRecord, fullBoard, boardSetup, next)\n          : placeOnePiece({\n              col: colInd,\n              curRecord: gameRecord,\n              fullBoard,\n              checkAgainst,\n              next,\n            }),\n      });\n    },\n    [gameDispatch, placeOnePiece, gameRecord, fullBoard, checkAgainst, next, setting]\n  );\n\n  return (\n    <div>\n      <style jsx global>\n        {`\n          body {\n            touch-action: manipulation;\n          }\n        `}\n      </style>\n      <h1>\n        <button\n          type=\"button\"\n          aria-label=\"Title\"\n          className={titleStyles.className}\n          onClick={() => {\n            if (setting !== Settings.CHANGE_RULES) {\n              updateSetting(Settings.CHANGE_RULES);\n            }\n          }}\n        >\n          {titleStyles.styles}\n        </button>\n      </h1>\n      <div className={inputContainerStyles.className}>\n        {setting === Settings.CHANGE_RULES ? (\n          <input\n            ref={focusInput}\n            aria-label=\"change-rules-label\"\n            className={inputStyles.className}\n            type=\"text\"\n            placeholder=\"[column],[row],[number]\"\n            value={inputText}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => changeInputText(e.target.value)}\n            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n              if (e.which === 13) {\n                try {\n                  const inputArray = inputText.split(',').map(text => {\n                    const num = parseInt(text.trim(), 10);\n                    if (Number.isNaN(num)) throw new Error();\n                    return num;\n                  });\n                  if (inputArray.length !== 3) throw new Error();\n                  dispatch({\n                    type: 'changeRules',\n                    payload: {\n                      rowNum: inputArray[1],\n                      colNum: inputArray[0],\n                      winRule: inputArray[2],\n                    },\n                  });\n                } catch (err) {\n                  console.log('invalid input');\n                }\n                clearSetting();\n              } else if (e.keyCode === 27) {\n                clearSetting();\n              }\n            }}\n            onBlur={() => {\n              clearSetting();\n            }}\n          />\n        ) : (\n          <button\n            type=\"button\"\n            aria-label=\"banner\"\n            className={bannerStyles.className}\n            onClick={() => restartGame()}\n          >\n            {bannerStyles.styles}\n          </button>\n        )}\n      </div>\n      {inputStyles.styles}\n      {inputContainerStyles.styles}\n      <div className={inputContainerStyles.className}>\n        {setting === Settings.CHANGE_PLAYERS ? (\n          <input\n            ref={focusInput}\n            aria-label=\"change-players-input\"\n            className={inputStyles.className}\n            type=\"text\"\n            placeholder=\"up to 4 player's names with comma in between\"\n            value={inputText}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => changeInputText(e.target.value)}\n            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n              if (e.which === 13) {\n                try {\n                  const inputArray = inputText.split(',').map(text => text.trim());\n                  if (inputArray.length < 1 || inputArray.length > 4) throw new Error();\n                  dispatch({\n                    type: 'changePlayers',\n                    payload: inputArray,\n                  });\n                } catch (err) {\n                  console.log('invalid input');\n                }\n                clearSetting();\n              } else if (e.keyCode === 27) {\n                clearSetting();\n              }\n            }}\n            onBlur={() => {\n              clearSetting();\n            }}\n          />\n        ) : (\n          <button\n            type=\"button\"\n            aria-label=\"legend\"\n            className={legendStyles.className}\n            onClick={() => updateSetting(Settings.CHANGE_PLAYERS)}\n          >\n            {legendStyles.styles}\n            {names.map((n, ind) => (\n              <div className={legendLabelStyles.className} key={`legend-${n}`}>\n                {legendLabelStyles.styles}\n                <div\n                  className={`${legendColorStyles.className}\n                  ${playerCheckerStyles[ind].className}`}\n                >\n                  {playerCheckerStyles[ind].styles}\n                  {legendColorStyles.styles}\n                </div>\n                {n}\n              </div>\n            ))}\n          </button>\n        )}\n      </div>\n      <Board boards={gameRecord.boards} rowNum={rowNum} onClickOnCell={handleClickOnCell} />\n    </div>\n  );\n};\n\nexport default ConnectN;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AAJA;AAYA;AAdA;AAkBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCA;AACA;AAEA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AACA;AAEA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}