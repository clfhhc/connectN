{"version":3,"file":"static/webpack/static/development/pages/ticTacToe.js.504fbac414a676b5a59e.hot-update.js","sources":["webpack:///./src/components/TicTacToe/Board.tsx"],"sourcesContent":["import React, { FC, useCallback } from 'react';\nimport { css } from '@emotion/core';\nimport rem from '../../utils/style/rem';\nimport buttonReset from '../../utils/style/buttonReset';\n\nconst boardStylesOnColNum = (colNum: number) => css`\n  max-width: ${rem(80 * colNum)};\n  margin: ${rem(20)} auto;\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: repeat(${colNum}, 1fr);\n  grid-gap: 0;\n  grid-auto-rows: auto;\n  border: ${rem(2)} solid transparent;\n\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-tap-highlight-color: transparent;\n`;\n\nconst cellStyles = css`\n  ${buttonReset};\n  cursor: pointer;\n  width: 100%;\n  position: relative;\n  &::before {\n    display: block;\n    width: calc(100% - ${rem(2 * 7)});\n    content: '';\n    padding-bottom: calc(100% - ${rem(2 * 7)});\n    margin: ${rem(5)};\n    border: ${rem(2)} solid gray;\n  }\n\n  @media only screen and (max-width: 400px) {\n    &::before {\n      width: calc(100% - ${rem(2 * 3)});\n      padding-bottom: calc(100% - ${rem(2 * 3)});\n      margin: ${rem(2)};\n      border: ${rem(1)} solid gray;\n    }\n  }\n`;\n\nconst checkerStyles = css`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  & div {\n    width: 100%;\n    height: 100%;\n    display: table;\n  }\n  & span {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n    font-size: 8vw;\n  }\n`;\n\nexport const playerCheckerStyles = [\n  css`\n    border-color: gray;\n    background: yellow;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    vertical-align: middle;\n    content: 'O';\n  `,\n  css`\n    border-color: lightgray;\n    background: red;\n    &::after {\n      content: 'X';\n    }\n  `,\n];\n\ninterface Props {\n  rowNum: number;\n  boards: number[][];\n  onClickOnCell(colInd: number, rowInd: number): (e: React.MouseEvent) => void;\n}\n\nconst Board: FC<Props> = ({ rowNum, boards, onClickOnCell }) => {\n  const colNum = boards[0].length;\n\n  const boardStyles = boardStylesOnColNum(colNum);\n\n  const cellGridPos = useCallback(\n    (rowInd: number, colInd: number) => css`\n      grid-row: ${rowNum - rowInd} / span 1;\n      grid-column: ${colInd + 1} / span 1;\n    `,\n    [rowNum]\n  );\n\n  return (\n    <div css={boardStyles}>\n      {boards[0].map((_c, colInd) =>\n        Array.from(Array(rowNum), (_r, rowInd) => (\n          <button\n            type=\"button\"\n            aria-label=\"board\"\n            // eslint-disable-next-line react/no-array-index-key\n            key={`cell-${colInd}-${rowInd}`}\n            css={[cellStyles, cellGridPos(rowInd, colInd)]}\n            onClick={onClickOnCell(colInd, rowInd)}\n          >\n            <div\n              css={[\n                checkerStyles,\n              ]}\n            >\n              <div>\n                <span>\n                  {boards.reduce(\n                    (result, _n, ind) =>\n                      (boards[ind][colInd] & (1 << rowInd) && ['O', 'X'][ind]) || result,\n                    ''\n                  )}\n                </span>\n              </div>\n            </div>\n          </button>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwBA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAjBA;AADA;AA8BA;AACA;AACA;;;;A","sourceRoot":""}