{"version":3,"file":"static/webpack/static/development/pages/index.js.207224d5e4d40f7778e7.hot-update.js","sources":["webpack:///./src/components/ConnectN/Board.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport css from 'styled-jsx/css';\nimport { rem } from '../../utils/styleUtils';\n\nconst boardStylesOnColNum = (colNum: number) => css.resolve`\n  max-width: ${rem(80 * colNum)};\n  margin: ${rem(20)} auto;\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: repeat(${colNum}, 1fr);\n  grid-gap: 0;\n  grid-auto-rows: auto;\n  border: ${rem(2)} solid black;\n\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-tap-highlight-color: transparent;\n`;\n\nconst cellStyles = css.resolve`\n  cursor: pointer;\n  border: ${rem(1)} solid lightgray;\n`;\n\nconst checkerStyles = css.resolve`\n  width: auto;\n  padding-bottom: calc(100% - ${rem(2 * 7)});\n  margin: ${rem(5)};\n  border-radius: 50%;\n  border: ${rem(2)} solid gray;\n\n  @media only screen and (max-width: 400px) {\n    padding-bottom: calc(100% - ${rem(2 * 3)});\n    margin: ${rem(2)};\n    border: ${rem(1)} solid gray;\n  }\n`;\n\nexport const playerCheckerStyles = [\n  css.resolve`\n    border-color: gray;\n    background: yellow;\n  `,\n  css.resolve`\n    border-color: lightgray;\n    background: red;\n  `,\n  css.resolve`\n    border-color: gray;\n    background: skyblue;\n  `,\n  css.resolve`\n    border-color: lightgray;\n    background: pink;\n  `,\n];\n\ninterface Props {\n  rowNum: number;\n  boards: number[][];\n  onClickOnCell(colInd: number): (e: React.MouseEvent) => void;\n}\n\nconst Board: React.FC<Props> = ({ rowNum, boards, onClickOnCell }) => {\n  const colNum = boards[0].length;\n\n  const boardStyles = boardStylesOnColNum(colNum);\n\n  const cellGridPos = useCallback(\n    (rowInd: number, colInd: number) => css.resolve`\n      grid-row: ${rowNum - rowInd} / span 1;\n      grid-column: ${colInd + 1} / span 1;\n    `,\n    [rowNum]\n  );\n\n  const cellGridPosStyles = useMemo(\n    () =>\n      Array.from(Array(colNum), (_c, colInd) =>\n        Array.from(Array(rowNum), (_r, rowInd) => cellGridPos(rowInd, colInd))\n      ),\n    [colNum, rowNum, cellGridPos]\n  );\n\n  return (\n    <div className={boardStyles.className}>\n      {boardStyles.styles}\n      {boards[0].map((_c, colInd) =>\n        Array.from(Array(rowNum), (_r, rowInd) => (\n          <button\n            // eslint-disable-next-line react/no-array-index-key\n            key={`cell-${colInd}-${rowInd}`}\n            type=\"button\"\n            className={`${cellStyles.className} ${cellGridPosStyles[colInd][rowInd].className}`}\n            onClick={onClickOnCell(colInd)}\n          >\n            {cellGridPosStyles[colInd][rowInd].styles}\n            {cellStyles.styles}\n            <div\n              className={`${checkerStyles.className}${boards.reduce(\n                (result, _n, ind) =>\n                  (boards[ind][colInd] & (1 << rowInd) &&\n                    ` ${playerCheckerStyles[ind].className}`) ||\n                  result,\n                ''\n              )}`}\n            >\n              {checkerStyles.styles}\n              {playerCheckerStyles.map(styles => styles.styles)}\n            </div>\n          </button>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwBA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AADA;AADA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AApBA;AADA;AA4BA;AACA;AACA;;;;A","sourceRoot":""}