{"version":3,"file":"static/webpack/static/development/pages/index.js.174624573d65243cddf2.hot-update.js","sources":["webpack:///./src/components/ConnectN/Board.tsx"],"sourcesContent":["import React, { FC, useCallback } from 'react';\nimport { css, SerializedStyles } from '@emotion/core';\nimport rem from '../../utils/style/rem';\nimport { GameType } from '../../utils/connectN/connectN';\n\nconst boardStyles = css`\n  margin: ${rem(20)} auto;\n  box-sizing: border-box;\n  display: grid;\n  grid-auto-rows: auto;\n\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-tap-highlight-color: transparent;\n`;\n\nconst boardStylesOnColNum = (colNum: number) => css`\n  max-width: ${rem(80 * colNum)};\n  grid-template-columns: repeat(${colNum}, 1fr);\n`;\n\nconst boardStylesOnGameType: { [key in string]: SerializedStyles } = {\n  connectN: css`\n    grid-gap: ${rem(1)};\n    background-color: lightgray;\n    border: ${rem(2)} solid black;\n  `,\n  ticTacToe: css`\n    grid-gap: ${rem(3)};\n    background-color: black;\n    border: ${rem(3)} solid white;\n  `,\n};\n\nconst cellStyles = css`\n  cursor: pointer;\n  background-color: white;\n`;\n\nconst cellStylesOnGameType: { [key in string]: SerializedStyles } = {\n  ticTacToe: css`\n    width: 100%;\n    position: relative;\n    &::before {\n      display: block;\n      content: '';\n      width: 100%;\n      padding-bottom: 100%;\n    }\n  `,\n};\n\nconst checkerStylesOnGameType: { [key in string]: SerializedStyles } = {\n  connectN: css`\n    width: auto;\n    padding-bottom: calc(100% - ${rem(2 * 7)});\n    margin: ${rem(5)};\n    border-radius: 50%;\n    border: ${rem(2)} solid gray;\n\n    @media only screen and (max-width: 400px) {\n      padding-bottom: calc(100% - ${rem(2 * 3)});\n      margin: ${rem(2)};\n      border: ${rem(1)} solid gray;\n    }\n  `,\n  ticTacToe: css`\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: block;\n\n    & svg {\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      width: 80%;\n      height: 80%;\n    }\n\n    // & text {\n    //   display: table-cell;\n    //   text-align: center;\n    //   vertical-align: middle;\n    // }\n  `,\n};\n\nexport const playerCheckerStylesOnGameType: { [key in string]: SerializedStyles[] } = {\n  connectN: [\n    css`\n      border-color: gray;\n      background: yellow;\n    `,\n    css`\n      border-color: white;\n      background: red;\n\n      @media only screen and (max-width: 400px) {\n        border-color: white;\n      }\n    `,\n    css`\n      border-color: gray;\n      background: skyblue;\n    `,\n    css`\n      border-color: gray;\n      background: pink;\n    `,\n  ],\n  ticTacToe: [\n    css`\n      &::after {\n        content: 'O:';\n      }\n    `,\n    css`\n      &::after {\n        content: 'X:';\n      }\n    `,\n  ],\n};\n\nconst TicTacToePiece: FC<{ type?: 'O' | 'X' }> = ({ type }) => (\n  <svg viewBox={type === 'O' ? '0 0 11 12' : '0 0 10 12'}>\n    <text\n      x={type === 'O' ? '1' : '1'}\n      y={type === 'O' ? '10' : '10'}\n      textAnchor=\"center\"\n      fontWeight=\"300\"\n    >\n      {type}\n    </text>\n  </svg>\n);\n\ninterface Props {\n  gameType?: GameType;\n  rowNum: number;\n  boards: number[][];\n  onClickOnCell?(colInd: number, rowInd: number): (e: React.MouseEvent) => void;\n}\n\nconst Board: FC<Props> = ({ gameType = GameType.connectN, rowNum, boards, onClickOnCell }) => {\n  const colNum = boards[0].length;\n\n  const cellGridPos = useCallback(\n    (rowInd: number, colInd: number) => css`\n      grid-row: ${rowNum - rowInd} / span 1;\n      grid-column: ${colInd + 1} / span 1;\n    `,\n    [rowNum]\n  );\n\n  return (\n    <div css={[boardStyles, boardStylesOnColNum(colNum), boardStylesOnGameType[gameType]]}>\n      {boards[0].map((_c, colInd) =>\n        Array.from(Array(rowNum), (_r, rowInd) => (\n          <button\n            type=\"button\"\n            aria-label=\"board\"\n            // eslint-disable-next-line react/no-array-index-key\n            key={`cell-${colInd}-${rowInd}`}\n            css={[cellStyles, cellStylesOnGameType[gameType], cellGridPos(rowInd, colInd)]}\n            onClick={onClickOnCell && onClickOnCell(colInd, rowInd)}\n          >\n            <div\n              css={[\n                checkerStylesOnGameType[gameType],\n                gameType === GameType.connectN &&\n                  boards.reduce(\n                    (result, _n, ind) =>\n                      (boards[ind][colInd] & (1 << rowInd) &&\n                        playerCheckerStylesOnGameType[gameType][ind]) ||\n                      result,\n                    css``\n                  ),\n              ]}\n            >\n              {gameType === GameType.ticTacToe &&\n                boards.reduce(\n                  (result, _n, ind) =>\n                    (boards[ind][colInd] & (1 << rowInd) &&\n                      [<TicTacToePiece type=\"O\" />, <TicTacToePiece type=\"X\" />][ind]) ||\n                    result,\n                  <TicTacToePiece />\n                )}\n            </div>\n          </button>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AANA;AAaA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA,+BAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAaA;AACA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAdA;AAuCA;AACA,+BAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBA;AACA;AAoCA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;;;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAIA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BA;AADA;AAqCA;AACA;AACA;;;;A","sourceRoot":""}