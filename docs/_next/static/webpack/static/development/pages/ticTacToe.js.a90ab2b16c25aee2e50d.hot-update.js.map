{"version":3,"file":"static/webpack/static/development/pages/ticTacToe.js.a90ab2b16c25aee2e50d.hot-update.js","sources":["webpack:///./src/components/TicTacToe/index.tsx"],"sourcesContent":["import React, { FC, useState, useCallback, KeyboardEvent, useEffect } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { css } from '@emotion/core';\nimport Board, { playerCheckerStyles } from './Board';\nimport { ConnectedProps } from '../../utils/redux/types';\nimport {\n  getBanner,\n  GameRecord,\n  GameSetup,\n  ResetGameProps,\n  PlaceOnePieceProps,\n  GameType,\n} from '../../utils/connectN/connectN';\nimport { ChangePlayersProps } from '../../redux/reducers/setup';\nimport buttonReset from '../../utils/style/buttonReset';\nimport rem from '../../utils/style/rem';\nimport { RESTART_GAME, PLACE_ONE_PIECE, CHANGE_PLAYERS } from '../../redux/actions/actionTypes';\nimport objectIsEmpty from '../../utils/common/objectIsEmpty';\n\nconst gameType = GameType.ticTacToe;\n\nenum Settings {\n  CHANGE_RULES_SETTINGS = 'CHANGE_RULES_SETTINGS',\n  CHANGE_PLAYERS_SETTINGS = 'CHANGE_PLAYERS_SETTINGS',\n}\n\nconst titleStyles = css`\n  ${buttonReset};\n  display: block;\n  text-align: center;\n  margin: ${rem(40)} auto;\n  font-size: ${rem(36)};\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n\n  ::after {\n    content: 'Tic-Tac-Toe';\n  }\n`;\n\nconst bannerStylesOnBanner = (banner: string) => css`\n  ${buttonReset};\n  display: block;\n  text-align: center;\n  margin: ${rem(20)} auto;\n  font-size: ${rem(20)};\n  cursor: pointer;\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n  height: 100%;\n\n  ::after {\n    content: \"${banner}\";\n  }\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n\n  :hover ::after {\n    content: 'Restart Game';\n  }\n`;\n\nconst legendStyles = css`\n  ${buttonReset};\n  display: flex;\n  flex-flow: row wrap;\n  margin: ${rem(20)} auto;\n  font-size: ${rem(20)};\n  justify-content: center;\n  cursor: pointer;\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n  height: 100%;\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n`;\n\nconst legendLabelStyles = css`\n  margin: 0 ${rem(10)};\n  display: inline-block;\n\n  :first-of-type {\n    margin-left: 0;\n  }\n  :last-of-type {\n    margin-right: 0;\n  }\n`;\n\nconst legendColorStyles = css`\n  display: inline-block;\n  border: ${rem(1)} solid lightgray;\n  border-radius: 50%;\n  margin-right: ${rem(10)};\n  width: ${rem(15)};\n  height: ${rem(15)};\n`;\n\nconst inputContainerStyles = css`\n  height: ${rem(25)};\n`;\n\nconst inputStyles = css`\n  display: block;\n  text-align: center;\n  font-size: ${rem(16)};\n  outline: none;\n  margin: ${rem(20)} auto;\n  max-width: ${rem(350)};\n  border: ${rem(1)} solid gray;\n  height: 100%;\n  width: 100%;\n`;\n\nconst mapStateToProps = (state: any): { setup: GameSetup; game: GameRecord } => ({\n  setup: state.setup || {},\n  game: state.game || {},\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  resetGame: (resetGameProps: ResetGameProps) =>\n    dispatch({ type: RESTART_GAME, payload: resetGameProps }),\n  placeOnePiece: (placeOnePieceProps: PlaceOnePieceProps) =>\n    dispatch({ type: PLACE_ONE_PIECE, payload: placeOnePieceProps }),\n  changePlayers: (changePlayersProps: ChangePlayersProps) =>\n    dispatch({ type: CHANGE_PLAYERS, payload: changePlayersProps }),\n});\n\ntype Props = ConnectedProps<typeof mapStateToProps, typeof mapDispatchToProps>;\n\nconst TicTacToe: FC<Props> = ({ setup, game, resetGame, placeOnePiece, changePlayers }) => {\n  const [setting, updateSetting] = useState<Settings | null>(null);\n  const [inputText, changeInputText] = useState<string>('');\n\n  const { fullBoard, boardSetup, next, names, rowNum, checkAgainst, fullColumn } = setup;\n  const { win, gameOver, turn, boards } = game;\n\n  const clearSetting = useCallback(() => {\n    updateSetting(null);\n    changeInputText('');\n  }, [updateSetting, changeInputText]);\n\n  const focusInput = useCallback((node: HTMLInputElement | null) => {\n    if (node) node.focus();\n  }, []);\n\n  const restart = () => resetGame({ next, fullBoard, fullColumn, boardSetup, turn });\n  const tossOnePiece = ({ colInd, rowInd }: { colInd: number; rowInd: number }) =>\n    placeOnePiece({\n      gameType,\n      colInd,\n      rowInd,\n      curRecord: game,\n      fullColumn,\n      checkAgainst,\n      next,\n    });\n\n  useEffect(() => {\n    if (!objectIsEmpty(setup)) {\n      restart();\n    }\n  }, [setup]);\n\n  const handleClickOnCell = (colInd: number, rowInd: number) => () => {\n    if (setting) return;\n    if (gameOver) {\n      restart();\n      return;\n    }\n    tossOnePiece({ colInd, rowInd });\n  };\n\n  const handleChangePlayers = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.which === 13) {\n      try {\n        const inputArray = inputText.split(',').map(text => text.trim());\n        changePlayers({\n          gameType,\n          names: inputArray,\n        });\n        clearSetting();\n      } catch (err) {\n        console.log(err);\n      }\n    } else if (e.keyCode === 27) {\n      clearSetting();\n    }\n  };\n\n  const handleChangeInput = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => changeInputText(e.target.value),\n    [changeInputText]\n  );\n\n  if (objectIsEmpty(game) || objectIsEmpty(setup)) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h1>\n        <button\n          type=\"button\"\n          aria-label=\"Title\"\n          css={titleStyles}\n          onClick={() => {\n            if (setting !== Settings.CHANGE_RULES_SETTINGS) {\n              updateSetting(Settings.CHANGE_RULES_SETTINGS);\n            }\n          }}\n        />\n      </h1>\n      <div css={inputContainerStyles}>\n        <button\n          type=\"button\"\n          aria-label=\"banner\"\n          css={bannerStylesOnBanner(getBanner({ gameOver, turn, names, win }))}\n          onClick={restart}\n        />\n      </div>\n      <div css={inputContainerStyles}>\n        {setting === Settings.CHANGE_PLAYERS_SETTINGS ? (\n          <input\n            ref={focusInput}\n            aria-label=\"change-players-input\"\n            css={inputStyles}\n            type=\"text\"\n            placeholder=\"change players' names, with comma in between\"\n            value={inputText}\n            onChange={handleChangeInput}\n            onKeyDown={handleChangePlayers}\n            onBlur={clearSetting}\n          />\n        ) : (\n          <button\n            type=\"button\"\n            aria-label=\"legend\"\n            css={legendStyles}\n            onClick={() => updateSetting(Settings.CHANGE_PLAYERS_SETTINGS)}\n          >\n            {names.map((n, ind) => (\n              <div css={legendLabelStyles} key={`legend-${n}`}>\n                <div css={[legendColorStyles, playerCheckerStyles[ind]]} />\n                {n}\n              </div>\n            ))}\n          </button>\n        )}\n      </div>\n      <Board boards={boards} rowNum={rowNum} onClickOnCell={handleClickOnCell} />\n    </div>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TicTacToe);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwBA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAYA;AAAA;AAAA;AASA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAWA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AALA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}