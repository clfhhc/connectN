webpackHotUpdate("static/development/pages/ticTacToe.js",{

/***/ "./src/components/TicTacToe/index.tsx":
/*!********************************************!*\
  !*** ./src/components/TicTacToe/index.tsx ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/css */ "./node_modules/@emotion/css/dist/css.browser.esm.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Board */ "./src/components/TicTacToe/Board.tsx");
/* harmony import */ var _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/connectN/connectN */ "./src/utils/connectN/connectN.ts");
/* harmony import */ var _utils_style_buttonReset__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/style/buttonReset */ "./src/utils/style/buttonReset.ts");
/* harmony import */ var _utils_style_rem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/style/rem */ "./src/utils/style/rem.ts");
/* harmony import */ var _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../redux/actions/actionTypes */ "./src/redux/actions/actionTypes.ts");
/* harmony import */ var _utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/common/objectIsEmpty */ "./src/utils/common/objectIsEmpty.ts");


var _jsxFileName = "/Users/david.chen/Documents/projects/next9/src/components/TicTacToe/index.tsx";










var gameType = _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_6__["GameType"].ticTacToe;
var Settings;

(function (Settings) {
  Settings["CHANGE_RULES_SETTINGS"] = "CHANGE_RULES_SETTINGS";
  Settings["CHANGE_PLAYERS_SETTINGS"] = "CHANGE_PLAYERS_SETTINGS";
})(Settings || (Settings = {}));

var titleStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["css"])(_utils_style_buttonReset__WEBPACK_IMPORTED_MODULE_7__["default"], ";display:block;text-align:center;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(40), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(36), ";border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid transparent;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid transparent;::after{content:'Tic-Tac-Toe';}label:titleStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC5jaGVuL0RvY3VtZW50cy9wcm9qZWN0cy9uZXh0OS9zcmMvY29tcG9uZW50cy9UaWNUYWNUb2UvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJCdUIiLCJmaWxlIjoiL1VzZXJzL2RhdmlkLmNoZW4vRG9jdW1lbnRzL3Byb2plY3RzL25leHQ5L3NyYy9jb21wb25lbnRzL1RpY1RhY1RvZS9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgRkMsIHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgS2V5Ym9hcmRFdmVudCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgQm9hcmQsIHsgcGxheWVyQ2hlY2tlclN0eWxlcyB9IGZyb20gJy4vQm9hcmQnO1xuaW1wb3J0IHsgQ29ubmVjdGVkUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscy9yZWR1eC90eXBlcyc7XG5pbXBvcnQge1xuICBnZXRCYW5uZXIsXG4gIEdhbWVSZWNvcmQsXG4gIEdhbWVTZXR1cCxcbiAgUmVzZXRHYW1lUHJvcHMsXG4gIFBsYWNlT25lUGllY2VQcm9wcyxcbiAgR2FtZVR5cGUsXG59IGZyb20gJy4uLy4uL3V0aWxzL2Nvbm5lY3ROL2Nvbm5lY3ROJztcbmltcG9ydCB7IENoYW5nZVBsYXllcnNQcm9wcyB9IGZyb20gJy4uLy4uL3JlZHV4L3JlZHVjZXJzL3NldHVwJztcbmltcG9ydCBidXR0b25SZXNldCBmcm9tICcuLi8uLi91dGlscy9zdHlsZS9idXR0b25SZXNldCc7XG5pbXBvcnQgcmVtIGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlL3JlbSc7XG5pbXBvcnQgeyBSRVNUQVJUX0dBTUUsIFBMQUNFX09ORV9QSUVDRSwgQ0hBTkdFX1BMQVlFUlMgfSBmcm9tICcuLi8uLi9yZWR1eC9hY3Rpb25zL2FjdGlvblR5cGVzJztcbmltcG9ydCBvYmplY3RJc0VtcHR5IGZyb20gJy4uLy4uL3V0aWxzL2NvbW1vbi9vYmplY3RJc0VtcHR5JztcblxuY29uc3QgZ2FtZVR5cGUgPSBHYW1lVHlwZS50aWNUYWNUb2U7XG5cbmVudW0gU2V0dGluZ3Mge1xuICBDSEFOR0VfUlVMRVNfU0VUVElOR1MgPSAnQ0hBTkdFX1JVTEVTX1NFVFRJTkdTJyxcbiAgQ0hBTkdFX1BMQVlFUlNfU0VUVElOR1MgPSAnQ0hBTkdFX1BMQVlFUlNfU0VUVElOR1MnLFxufVxuXG5jb25zdCB0aXRsZVN0eWxlcyA9IGNzc2BcbiAgJHtidXR0b25SZXNldH07XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbjogJHtyZW0oNDApfSBhdXRvO1xuICBmb250LXNpemU6ICR7cmVtKDM2KX07XG4gIGJvcmRlci10b3A6ICR7cmVtKDEpfSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWJvdHRvbTogJHtyZW0oMSl9IHNvbGlkIHRyYW5zcGFyZW50O1xuXG4gIDo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICdUaWMtVGFjLVRvZSc7XG4gIH1cbmA7XG5cbmNvbnN0IGJhbm5lclN0eWxlc09uQmFubmVyID0gKGJhbm5lcjogc3RyaW5nKSA9PiBjc3NgXG4gICR7YnV0dG9uUmVzZXR9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW46ICR7cmVtKDIwKX0gYXV0bztcbiAgZm9udC1zaXplOiAke3JlbSgyMCl9O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJvcmRlci10b3A6ICR7cmVtKDEpfSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWJvdHRvbTogJHtyZW0oMSl9IHNvbGlkIHRyYW5zcGFyZW50O1xuICBoZWlnaHQ6IDEwMCU7XG5cbiAgOjphZnRlciB7XG4gICAgY29udGVudDogXCIke2Jhbm5lcn1cIjtcbiAgfVxuXG4gIDpob3ZlciB7XG4gICAgYm9yZGVyLXRvcDogJHtyZW0oMSl9IHNvbGlkIGJsYWNrO1xuICAgIGJvcmRlci1ib3R0b206ICR7cmVtKDEpfSBzb2xpZCBibGFjaztcbiAgfVxuXG4gIDpob3ZlciA6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnUmVzdGFydCBHYW1lJztcbiAgfVxuYDtcblxuY29uc3QgbGVnZW5kU3R5bGVzID0gY3NzYFxuICAke2J1dHRvblJlc2V0fTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgbWFyZ2luOiAke3JlbSgyMCl9IGF1dG87XG4gIGZvbnQtc2l6ZTogJHtyZW0oMjApfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyLXRvcDogJHtyZW0oMSl9IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItYm90dG9tOiAke3JlbSgxKX0gc29saWQgdHJhbnNwYXJlbnQ7XG4gIGhlaWdodDogMTAwJTtcblxuICA6aG92ZXIge1xuICAgIGJvcmRlci10b3A6ICR7cmVtKDEpfSBzb2xpZCBibGFjaztcbiAgICBib3JkZXItYm90dG9tOiAke3JlbSgxKX0gc29saWQgYmxhY2s7XG4gIH1cbmA7XG5cbmNvbnN0IGxlZ2VuZExhYmVsU3R5bGVzID0gY3NzYFxuICBtYXJnaW46IDAgJHtyZW0oMTApfTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXG4gIDpmaXJzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgfVxuICA6bGFzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gIH1cbmA7XG5cbmNvbnN0IGxlZ2VuZENvbG9yU3R5bGVzID0gY3NzYFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogJHtyZW0oMTApfTtcbiAgd2lkdGg6ICR7cmVtKDE1KX07XG4gIGhlaWdodDogJHtyZW0oMTUpfTtcbmA7XG5cbmNvbnN0IGlucHV0Q29udGFpbmVyU3R5bGVzID0gY3NzYFxuICBoZWlnaHQ6ICR7cmVtKDI1KX07XG5gO1xuXG5jb25zdCBpbnB1dFN0eWxlcyA9IGNzc2BcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1zaXplOiAke3JlbSgxNil9O1xuICBvdXRsaW5lOiBub25lO1xuICBtYXJnaW46ICR7cmVtKDIwKX0gYXV0bztcbiAgbWF4LXdpZHRoOiAke3JlbSgzNTApfTtcbiAgYm9yZGVyOiAke3JlbSgxKX0gc29saWQgZ3JheTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbmA7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogYW55KTogeyBzZXR1cDogR2FtZVNldHVwOyBnYW1lOiBHYW1lUmVjb3JkIH0gPT4gKHtcbiAgc2V0dXA6IHN0YXRlLnNldHVwIHx8IHt9LFxuICBnYW1lOiBzdGF0ZS5nYW1lIHx8IHt9LFxufSk7XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogRGlzcGF0Y2gpID0+ICh7XG4gIHJlc2V0R2FtZTogKHJlc2V0R2FtZVByb3BzOiBSZXNldEdhbWVQcm9wcykgPT5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IFJFU1RBUlRfR0FNRSwgcGF5bG9hZDogcmVzZXRHYW1lUHJvcHMgfSksXG4gIHBsYWNlT25lUGllY2U6IChwbGFjZU9uZVBpZWNlUHJvcHM6IFBsYWNlT25lUGllY2VQcm9wcykgPT5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IFBMQUNFX09ORV9QSUVDRSwgcGF5bG9hZDogcGxhY2VPbmVQaWVjZVByb3BzIH0pLFxuICBjaGFuZ2VQbGF5ZXJzOiAoY2hhbmdlUGxheWVyc1Byb3BzOiBDaGFuZ2VQbGF5ZXJzUHJvcHMpID0+XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBDSEFOR0VfUExBWUVSUywgcGF5bG9hZDogY2hhbmdlUGxheWVyc1Byb3BzIH0pLFxufSk7XG5cbnR5cGUgUHJvcHMgPSBDb25uZWN0ZWRQcm9wczx0eXBlb2YgbWFwU3RhdGVUb1Byb3BzLCB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzPjtcblxuY29uc3QgVGljVGFjVG9lOiBGQzxQcm9wcz4gPSAoeyBzZXR1cCwgZ2FtZSwgcmVzZXRHYW1lLCBwbGFjZU9uZVBpZWNlLCBjaGFuZ2VQbGF5ZXJzIH0pID0+IHtcbiAgY29uc3QgW3NldHRpbmcsIHVwZGF0ZVNldHRpbmddID0gdXNlU3RhdGU8U2V0dGluZ3MgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lucHV0VGV4dCwgY2hhbmdlSW5wdXRUZXh0XSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuXG4gIGNvbnN0IHsgZnVsbEJvYXJkLCBib2FyZFNldHVwLCBuZXh0LCBuYW1lcywgcm93TnVtLCBjaGVja0FnYWluc3QsIGZ1bGxDb2x1bW4gfSA9IHNldHVwO1xuICBjb25zdCB7IHdpbiwgZ2FtZU92ZXIsIHR1cm4sIGJvYXJkcyB9ID0gZ2FtZTtcblxuICBjb25zdCBjbGVhclNldHRpbmcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgdXBkYXRlU2V0dGluZyhudWxsKTtcbiAgICBjaGFuZ2VJbnB1dFRleHQoJycpO1xuICB9LCBbdXBkYXRlU2V0dGluZywgY2hhbmdlSW5wdXRUZXh0XSk7XG5cbiAgY29uc3QgZm9jdXNJbnB1dCA9IHVzZUNhbGxiYWNrKChub2RlOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCkgPT4ge1xuICAgIGlmIChub2RlKSBub2RlLmZvY3VzKCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCByZXN0YXJ0ID0gKCkgPT4gcmVzZXRHYW1lKHsgbmV4dCwgZnVsbEJvYXJkLCBmdWxsQ29sdW1uLCBib2FyZFNldHVwLCB0dXJuIH0pO1xuICBjb25zdCB0b3NzT25lUGllY2UgPSAoeyBjb2xJbmQsIHJvd0luZCB9OiB7IGNvbEluZDogbnVtYmVyOyByb3dJbmQ6IG51bWJlciB9KSA9PlxuICAgIHBsYWNlT25lUGllY2Uoe1xuICAgICAgZ2FtZVR5cGUsXG4gICAgICBjb2xJbmQsXG4gICAgICByb3dJbmQsXG4gICAgICBjdXJSZWNvcmQ6IGdhbWUsXG4gICAgICBmdWxsQ29sdW1uLFxuICAgICAgY2hlY2tBZ2FpbnN0LFxuICAgICAgbmV4dCxcbiAgICB9KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb2JqZWN0SXNFbXB0eShzZXR1cCkpIHtcbiAgICAgIHJlc3RhcnQoKTtcbiAgICB9XG4gIH0sIFtzZXR1cF0pO1xuXG4gIGNvbnN0IGhhbmRsZUNsaWNrT25DZWxsID0gKGNvbEluZDogbnVtYmVyLCByb3dJbmQ6IG51bWJlcikgPT4gKCkgPT4ge1xuICAgIGlmIChzZXR0aW5nKSByZXR1cm47XG4gICAgaWYgKGdhbWVPdmVyKSB7XG4gICAgICByZXN0YXJ0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvc3NPbmVQaWVjZSh7IGNvbEluZCwgcm93SW5kIH0pO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZVBsYXllcnMgPSAoZTogS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5wdXRBcnJheSA9IGlucHV0VGV4dC5zcGxpdCgnLCcpLm1hcCh0ZXh0ID0+IHRleHQudHJpbSgpKTtcbiAgICAgICAgY2hhbmdlUGxheWVycyh7XG4gICAgICAgICAgZ2FtZVR5cGUsXG4gICAgICAgICAgbmFtZXM6IGlucHV0QXJyYXksXG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhclNldHRpbmcoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZUlucHV0ID0gdXNlQ2FsbGJhY2soXG4gICAgKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiBjaGFuZ2VJbnB1dFRleHQoZS50YXJnZXQudmFsdWUpLFxuICAgIFtjaGFuZ2VJbnB1dFRleHRdXG4gICk7XG5cbiAgaWYgKG9iamVjdElzRW1wdHkoZ2FtZSkgfHwgb2JqZWN0SXNFbXB0eShzZXR1cCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGFyaWEtbGFiZWw9XCJUaXRsZVwiXG4gICAgICAgICAgY3NzPXt0aXRsZVN0eWxlc31cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2V0dGluZyAhPT0gU2V0dGluZ3MuQ0hBTkdFX1JVTEVTX1NFVFRJTkdTKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZVNldHRpbmcoU2V0dGluZ3MuQ0hBTkdFX1JVTEVTX1NFVFRJTkdTKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9oMT5cbiAgICAgIDxkaXYgY3NzPXtpbnB1dENvbnRhaW5lclN0eWxlc30+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBhcmlhLWxhYmVsPVwiYmFubmVyXCJcbiAgICAgICAgICBjc3M9e2Jhbm5lclN0eWxlc09uQmFubmVyKGdldEJhbm5lcih7IGdhbWVPdmVyLCB0dXJuLCBuYW1lcywgd2luIH0pKX1cbiAgICAgICAgICBvbkNsaWNrPXtyZXN0YXJ0fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17aW5wdXRDb250YWluZXJTdHlsZXN9PlxuICAgICAgICB7c2V0dGluZyA9PT0gU2V0dGluZ3MuQ0hBTkdFX1BMQVlFUlNfU0VUVElOR1MgPyAoXG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiY2hhbmdlLXBsYXllcnMtaW5wdXRcIlxuICAgICAgICAgICAgY3NzPXtpbnB1dFN0eWxlc31cbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiY2hhbmdlIHBsYXllcnMnIG5hbWVzLCB3aXRoIGNvbW1hIGluIGJldHdlZW5cIlxuICAgICAgICAgICAgdmFsdWU9e2lucHV0VGV4dH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VJbnB1dH1cbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlQ2hhbmdlUGxheWVyc31cbiAgICAgICAgICAgIG9uQmx1cj17Y2xlYXJTZXR0aW5nfVxuICAgICAgICAgIC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwibGVnZW5kXCJcbiAgICAgICAgICAgIGNzcz17bGVnZW5kU3R5bGVzfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdXBkYXRlU2V0dGluZyhTZXR0aW5ncy5DSEFOR0VfUExBWUVSU19TRVRUSU5HUyl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge25hbWVzLm1hcCgobiwgaW5kKSA9PiAoXG4gICAgICAgICAgICAgIDxkaXYgY3NzPXtsZWdlbmRMYWJlbFN0eWxlc30ga2V5PXtgbGVnZW5kLSR7bn1gfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNzcz17W2xlZ2VuZENvbG9yU3R5bGVzLCBwbGF5ZXJDaGVja2VyU3R5bGVzW2luZF1dfSAvPlxuICAgICAgICAgICAgICAgIHtufVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgICA8Qm9hcmQgYm9hcmRzPXtib2FyZHN9IHJvd051bT17cm93TnVtfSBvbkNsaWNrT25DZWxsPXtoYW5kbGVDbGlja09uQ2VsbH0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzXG4pKFRpY1RhY1RvZSk7XG4iXX0= */"));

var bannerStylesOnBanner = function bannerStylesOnBanner(banner) {
  return (
    /*#__PURE__*/
    Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["css"])(_utils_style_buttonReset__WEBPACK_IMPORTED_MODULE_7__["default"], ";display:block;text-align:center;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(20), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(20), ";cursor:pointer;border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid transparent;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid transparent;height:100%;::after{content:\"", banner, "\";}:hover{border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid black;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid black;}:hover::after{content:'Restart Game';}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  );
};

var legendStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["css"])(_utils_style_buttonReset__WEBPACK_IMPORTED_MODULE_7__["default"], ";display:flex;flex-flow:row wrap;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(20), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(20), ";justify-content:center;cursor:pointer;border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid transparent;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid transparent;height:100%;:hover{border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid black;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid black;}label:legendStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var legendLabelStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["css"])("margin:0 ", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(10), ";display:inline-block;:first-of-type{margin-left:0;}:last-of-type{margin-right:0;}label:legendLabelStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var legendColorStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["css"])("display:inline-block;margin-right:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(10), ";width:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(15), ";height:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(15), ";label:legendColorStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var inputContainerStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["css"])("height:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(25), ";label:inputContainerStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var inputStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["css"])("display:block;text-align:center;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(16), ";outline:none;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(20), " auto;max-width:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(350), ";border:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_8__["default"])(1), " solid gray;height:100%;width:100%;label:inputStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var mapStateToProps = function mapStateToProps(state) {
  return {
    setup: state.setup || {},
    game: state.game || {}
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    resetGame: function resetGame(resetGameProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_9__["RESTART_GAME"],
        payload: resetGameProps
      });
    },
    placeOnePiece: function placeOnePiece(placeOnePieceProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_9__["PLACE_ONE_PIECE"],
        payload: placeOnePieceProps
      });
    },
    changePlayers: function changePlayers(changePlayersProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_9__["CHANGE_PLAYERS"],
        payload: changePlayersProps
      });
    }
  };
};

var TicTacToe = function TicTacToe(_ref) {
  var setup = _ref.setup,
      game = _ref.game,
      resetGame = _ref.resetGame,
      placeOnePiece = _ref.placeOnePiece,
      changePlayers = _ref.changePlayers;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_3__["useState"])(null),
      _useState2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_useState, 2),
      setting = _useState2[0],
      updateSetting = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_3__["useState"])(''),
      _useState4 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_useState3, 2),
      inputText = _useState4[0],
      changeInputText = _useState4[1];

  var fullBoard = setup.fullBoard,
      boardSetup = setup.boardSetup,
      next = setup.next,
      names = setup.names,
      rowNum = setup.rowNum,
      checkAgainst = setup.checkAgainst,
      fullColumn = setup.fullColumn;
  var win = game.win,
      gameOver = game.gameOver,
      turn = game.turn,
      boards = game.boards;
  var clearSetting = Object(react__WEBPACK_IMPORTED_MODULE_3__["useCallback"])(function () {
    updateSetting(null);
    changeInputText('');
  }, [updateSetting, changeInputText]);
  var focusInput = Object(react__WEBPACK_IMPORTED_MODULE_3__["useCallback"])(function (node) {
    if (node) node.focus();
  }, []);

  var restart = function restart() {
    return resetGame({
      next: next,
      fullBoard: fullBoard,
      fullColumn: fullColumn,
      boardSetup: boardSetup,
      turn: turn
    });
  };

  var tossOnePiece = function tossOnePiece(_ref2) {
    var colInd = _ref2.colInd,
        rowInd = _ref2.rowInd;
    return placeOnePiece({
      gameType: gameType,
      colInd: colInd,
      rowInd: rowInd,
      curRecord: game,
      fullColumn: fullColumn,
      checkAgainst: checkAgainst,
      next: next
    });
  };

  Object(react__WEBPACK_IMPORTED_MODULE_3__["useEffect"])(function () {
    if (!Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_10__["default"])(setup)) {
      restart();
    }
  }, [setup]);

  var handleClickOnCell = function handleClickOnCell(colInd, rowInd) {
    return function () {
      if (setting) return;

      if (gameOver) {
        restart();
        return;
      }

      tossOnePiece({
        colInd: colInd,
        rowInd: rowInd
      });
    };
  };

  var handleChangePlayers = function handleChangePlayers(e) {
    if (e.which === 13) {
      try {
        var inputArray = inputText.split(',').map(function (text) {
          return text.trim();
        });
        changePlayers({
          gameType: gameType,
          names: inputArray
        });
        clearSetting();
      } catch (err) {
        console.log(err);
      }
    } else if (e.keyCode === 27) {
      clearSetting();
    }
  };

  var handleChangeInput = Object(react__WEBPACK_IMPORTED_MODULE_3__["useCallback"])(function (e) {
    return changeInputText(e.target.value);
  }, [changeInputText]);

  if (Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_10__["default"])(game) || Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_10__["default"])(setup)) {
    return null;
  }

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("div", {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 206
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("h1", {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 207
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("button", {
    type: "button",
    "aria-label": "Title",
    css: titleStyles,
    onClick: function onClick() {
      if (setting !== Settings.CHANGE_RULES_SETTINGS) {
        updateSetting(Settings.CHANGE_RULES_SETTINGS);
      }
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 208
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("div", {
    css: inputContainerStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 219
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("button", {
    type: "button",
    "aria-label": "banner",
    css: bannerStylesOnBanner(Object(_utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_6__["getBanner"])({
      gameOver: gameOver,
      turn: turn,
      names: names,
      win: win
    })),
    onClick: restart,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 220
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("div", {
    css: inputContainerStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 227
    },
    __self: this
  }, setting === Settings.CHANGE_PLAYERS_SETTINGS ? Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("input", {
    ref: focusInput,
    "aria-label": "change-players-input",
    css: inputStyles,
    type: "text",
    placeholder: "change players' names, with comma in between",
    value: inputText,
    onChange: handleChangeInput,
    onKeyDown: handleChangePlayers,
    onBlur: clearSetting,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 229
    },
    __self: this
  }) : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("button", {
    type: "button",
    "aria-label": "legend",
    css: legendStyles,
    onClick: function onClick() {
      return updateSetting(Settings.CHANGE_PLAYERS_SETTINGS);
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 241
    },
    __self: this
  }, names.map(function (n, ind) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("div", {
      css: legendLabelStyles,
      key: "legend-".concat(n),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 248
      },
      __self: this
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])("div", {
      css:
      /*#__PURE__*/
      Object(_emotion_css__WEBPACK_IMPORTED_MODULE_0__["default"])([legendColorStyles, _Board__WEBPACK_IMPORTED_MODULE_5__["playerCheckerStyles"][ind]], "label:TicTacToe;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 249
      },
      __self: this
    }), n);
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_2__["jsx"])(_Board__WEBPACK_IMPORTED_MODULE_5__["default"], {
    boards: boards,
    rowNum: rowNum,
    onClickOnCell: handleClickOnCell,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 256
    },
    __self: this
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["connect"])(mapStateToProps, mapDispatchToProps)(TicTacToe));

/***/ })

})
//# sourceMappingURL=ticTacToe.js.efd5ff617b46ac52fae7.hot-update.js.map