{"version":3,"file":"static/webpack/static/development/pages/index.js.da48542fa9ace12d6ef8.hot-update.js","sources":["webpack:///./pages/index.tsx","webpack:///./src/components/ConnectN/Board.tsx","webpack:///./src/components/ConnectN/index.tsx","webpack:///./src/components/Link/index.tsx"],"sourcesContent":["import React from 'react';\nimport { NextFC, NextContext } from 'next';\nimport Head from '../src/components/Head';\nimport Link from '../src/components/Link';\nimport ConnectN from '../src/components/ConnectN';\n\nconst Page: NextFC<{}, {}, NextContext> = () => (\n  <div>\n    <Head title=\"Connect N\" themeColor=\"white\">\n      <Link href=\"/\" passHref>\n        <link rel=\"canonical\" />\n      </Link>\n    </Head>\n    <ConnectN />\n    <p>\n      <Link href=\"/about\">\n        <a>About</a>\n      </Link>\n    </p>\n  </div>\n);\n\nexport default Page;\n","import React, { useCallback, useMemo } from 'react';\nimport css from 'styled-jsx/css';\nimport { rem } from '../../utils/styleUtils';\n\nconst boardStylesOnColNum = (colNum: number) => css.resolve`\n  max-width: ${rem(80 * colNum)};\n  margin: ${rem(20)} auto;\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: repeat(${colNum}, 1fr);\n  grid-gap: 0;\n  grid-auto-rows: auto;\n  border: ${rem(2)} solid black;\n\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-tap-highlight-color: transparent;\n`;\n\nconst cellStyles = css.resolve`\n  cursor: pointer;\n  border: ${rem(1)} solid lightgray;\n`;\n\nconst checkerStyles = css.resolve`\n  width: auto;\n  padding-bottom: calc(100% - ${rem(2 * 7)});\n  margin: ${rem(5)};\n  border-radius: 50%;\n  border: ${rem(2)} solid gray;\n\n  @media only screen and (max-width: 400px) {\n    padding-bottom: calc(100% - ${rem(2 * 3)});\n    margin: ${rem(2)};\n    border: ${rem(1)} solid gray;\n  }\n`;\n\nexport const playerCheckerStyles = [\n  css.resolve`\n    border-color: gray;\n    background: yellow;\n  `,\n  css.resolve`\n    border-color: lightgray;\n    background: red;\n  `,\n  css.resolve`\n    border-color: gray;\n    background: skyblue;\n  `,\n  css.resolve`\n    border-color: lightgray;\n    background: pink;\n  `,\n];\n\ninterface Props {\n  rowNum: number;\n  boards: number[][];\n  onClickOnCell(colInd: number): (e: React.MouseEvent) => void;\n}\n\nconst Board: React.FC<Props> = ({ rowNum, boards, onClickOnCell }) => {\n  const colNum = boards[0].length;\n\n  const boardStyles = boardStylesOnColNum(colNum);\n\n  const cellGridPos = useCallback(\n    (rowInd: number, colInd: number) => css.resolve`\n      grid-row: ${rowNum - rowInd} / span 1;\n      grid-column: ${colInd + 1} / span 1;\n    `,\n    [rowNum]\n  );\n\n  const cellGridPosStyles = useMemo(\n    () =>\n      Array.from(Array(colNum), (_c, colInd) =>\n        Array.from(Array(rowNum), (_r, rowInd) => cellGridPos(rowInd, colInd))\n      ),\n    [colNum, rowNum, cellGridPos]\n  );\n\n  return (\n    <div className={boardStyles.className}>\n      {boardStyles.styles}\n      {boards[0].map((_c, colInd) =>\n        Array.from(Array(rowNum), (_r, rowInd) => (\n          <button\n            type=\"button\"\n            aria-label=\"board\"\n            // eslint-disable-next-line react/no-array-index-key\n            key={`cell-${colInd}-${rowInd}`}\n            className={`${cellStyles.className} ${cellGridPosStyles[colInd][rowInd].className}`}\n            onClick={onClickOnCell(colInd)}\n          >\n            {cellGridPosStyles[colInd][rowInd].styles}\n            {cellStyles.styles}\n            <div\n              className={`${checkerStyles.className}${boards.reduce(\n                (result, _n, ind) =>\n                  (boards[ind][colInd] & (1 << rowInd) &&\n                    ` ${playerCheckerStyles[ind].className}`) ||\n                  result,\n                ''\n              )}`}\n            >\n              {checkerStyles.styles}\n              {playerCheckerStyles.map(styles => styles.styles)}\n            </div>\n          </button>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useReducer, useEffect, useCallback, useState, useMemo } from 'react';\nimport css from 'styled-jsx/css';\nimport useReducerContext from '../../models/index';\nimport Board, { playerCheckerStyles } from './Board';\nimport { inititalState, reducer } from '../../models/game';\nimport { resetGame, placeOnePiece, getBanner } from '../../utils/connectN';\nimport { rem } from '../../utils/styleUtils';\n\nenum Settings {\n  CHANGE_RULES = 'CHANGE_RULES',\n  CHANGE_PLAYERS = 'CHANGE_PLAYERS',\n}\n\nconst titleStylesOnN = (setting: Settings | null, winRule: number) => css.resolve`\n  display: block;\n  text-align: center;\n  margin: ${rem(40)} auto;\n  font-size: ${rem(36)};\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n  cursor: pointer;\n\n  ::after {\n    content: '${setting === Settings.CHANGE_RULES ? 'Rules' : `Connect ${winRule}`}';\n  }\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n\n  :hover ::after {\n    content: '${setting === Settings.CHANGE_RULES ? 'Rules' : `Change Rules`}';\n  }\n`;\n\nconst bannerStylesOnBanner = (banner: string) => css.resolve`\n  display: block;\n  text-align: center;\n  margin: ${rem(20)} auto;\n  font-size: ${rem(20)};\n  cursor: pointer;\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n\n  ::after {\n    content: \"${banner}\";\n  }\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n\n  :hover ::after {\n    content: 'Restart Game';\n  }\n`;\n\nconst legendStyles = css.resolve`\n  display: flex;\n  flex-flow: row wrap;\n  margin: ${rem(20)} auto;\n  font-size: ${rem(20)};\n  justify-content: center;\n  cursor: pointer;\n  border-top: ${rem(1)} solid transparent;\n  border-bottom: ${rem(1)} solid transparent;\n\n  :hover {\n    border-top: ${rem(1)} solid black;\n    border-bottom: ${rem(1)} solid black;\n  }\n`;\n\nconst legendLabelStyles = css.resolve`\n  margin: 0 ${rem(10)};\n  display: inline-block;\n`;\n\nconst legendColorStyles = css.resolve`\n  display: inline-block;\n  border: ${rem(1)} solid lightgray;\n  border-radius: 50%;\n  margin: 0 ${rem(10)};\n  width: ${rem(15)};\n  height: ${rem(15)};\n`;\n\nconst inputStyles = css.resolve`\n  display: block;\n  text-align: center;\n  font-size: ${rem(16)};\n  outline: none;\n  margin: ${rem(20)} auto;\n  max-width: ${rem(350)};\n  border: ${rem(1)} solid gray;\n  width: 100%;\n`;\n\nconst ConnectN: React.FC = () => {\n  const { state, dispatch } = useReducerContext();\n  const [gameState, gameDispatch] = useReducer(reducer, inititalState);\n  const [setting, updateSetting] = useState<Settings | null>(null);\n  const [inputText, changeInputText] = useState<string>('');\n  const { fullBoard, boardSetup, next, names, rowNum, checkAgainst, winRule } = state.setup;\n  const { record: gameRecord } = gameState;\n\n  const restartGame = useCallback(() => {\n    gameDispatch({\n      type: 'updateGameRecord',\n      payload: resetGame(gameRecord, fullBoard, boardSetup, next),\n    });\n  }, [gameRecord, fullBoard, boardSetup, next]);\n\n  useEffect(() => {\n    restartGame();\n  }, [state.setup]);\n\n  const titleStyles = useMemo(() => titleStylesOnN(setting, winRule), [setting, winRule]);\n  const bannerStyles = useMemo(() => bannerStylesOnBanner(getBanner(gameRecord, names)), [\n    gameRecord,\n    names,\n  ]);\n\n  const clearSetting = useCallback(() => {\n    updateSetting(null);\n    changeInputText('');\n  }, [updateSetting, changeInputText]);\n\n  const focusInput = useCallback((node: HTMLInputElement | null) => {\n    if (node) node.focus();\n  }, []);\n\n  const handleClickOnCell = useCallback(\n    (colInd: number) => () => {\n      if (setting) return;\n      gameDispatch({\n        type: 'updateGameRecord',\n        payload: gameRecord.gameOver\n          ? resetGame(gameRecord, fullBoard, boardSetup, next)\n          : placeOnePiece({\n              col: colInd,\n              curRecord: gameRecord,\n              fullBoard,\n              checkAgainst,\n              next,\n            }),\n      });\n    },\n    [gameDispatch, placeOnePiece, gameRecord, fullBoard, checkAgainst, next, setting]\n  );\n\n  return (\n    <div>\n      <h1>\n        <button\n          type=\"button\"\n          aria-label=\"Title\"\n          className={titleStyles.className}\n          onClick={() => {\n            if (setting !== Settings.CHANGE_RULES) {\n              updateSetting(Settings.CHANGE_RULES);\n            }\n          }}\n        >\n          {titleStyles.styles}\n        </button>\n      </h1>\n      {setting === Settings.CHANGE_RULES ? (\n        <input\n          ref={focusInput}\n          aria-label=\"change-rules-label\"\n          className={inputStyles.className}\n          type=\"text\"\n          placeholder=\"[column],[row],[number]\"\n          value={inputText}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => changeInputText(e.target.value)}\n          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.which === 13) {\n              try {\n                const inputArray = inputText.split(',').map(text => {\n                  const num = parseInt(text.trim(), 10);\n                  if (Number.isNaN(num)) throw new Error();\n                  return num;\n                });\n                if (inputArray.length !== 3) throw new Error();\n                dispatch({\n                  type: 'changeRules',\n                  payload: { rowNum: inputArray[1], colNum: inputArray[0], winRule: inputArray[2] },\n                });\n              } catch (err) {\n                console.log('invalid input');\n              }\n              clearSetting();\n            } else if (e.keyCode === 27) {\n              clearSetting();\n            }\n          }}\n          onBlur={() => {\n            clearSetting();\n          }}\n        />\n      ) : (\n        <button\n          type=\"button\"\n          aria-label=\"banner\"\n          className={bannerStyles.className}\n          onClick={() => restartGame()}\n        >\n          {bannerStyles.styles}\n        </button>\n      )}\n      {inputStyles.styles}\n      {setting === Settings.CHANGE_PLAYERS ? (\n        <input\n          ref={focusInput}\n          aria-label=\"change-players-input\"\n          className={inputStyles.className}\n          type=\"text\"\n          placeholder=\"up to 4 player's names with comma in between\"\n          value={inputText}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => changeInputText(e.target.value)}\n          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.which === 13) {\n              try {\n                const inputArray = inputText.split(',').map(text => text.trim());\n                if (inputArray.length < 1 || inputArray.length > 4) throw new Error();\n                dispatch({\n                  type: 'changePlayers',\n                  payload: inputArray,\n                });\n              } catch (err) {\n                console.log('invalid input');\n              }\n              clearSetting();\n            } else if (e.keyCode === 27) {\n              clearSetting();\n            }\n          }}\n          onBlur={() => {\n            clearSetting();\n          }}\n        />\n      ) : (\n        <button\n          type=\"button\"\n          aria-label=\"legend\"\n          className={legendStyles.className}\n          onClick={() => updateSetting(Settings.CHANGE_PLAYERS)}\n        >\n          {legendStyles.styles}\n          {names.map((n, ind) => (\n            <div className={legendLabelStyles.className} key={`legend-${n}`}>\n              {legendLabelStyles.styles}\n              <div\n                className={`${legendColorStyles.className}\n                ${playerCheckerStyles[ind].className}`}\n              >\n                {playerCheckerStyles[ind].styles}\n                {legendColorStyles.styles}\n              </div>\n              {n}\n            </div>\n          ))}\n        </button>\n      )}\n      <Board boards={gameRecord.boards} rowNum={rowNum} onClickOnCell={handleClickOnCell} />\n    </div>\n  );\n};\n\nexport default ConnectN;\n","import React from 'react';\nimport { UrlLike } from 'next/router';\nimport getConfig from 'next-server/config';\nimport Link from 'next/link';\n\nconst { publicRuntimeConfig } = getConfig();\nconst { linkPrefix } = publicRuntimeConfig;\n\ninterface Props {\n  href: string | UrlLike;\n  as?: string | UrlLike;\n  children: React.ReactElement;\n  passHref?: boolean;\n}\n\nconst PrefixedLink: React.FC<Props> = ({ href, as = href, children, passHref }) => (\n  <Link href={href} as={`${linkPrefix}${as}`} passHref={passHref}>\n    {children}\n  </Link>\n);\n\nexport default PrefixedLink;\n"],"mappings":"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","sourceRoot":""}